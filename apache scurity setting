1. 如何从错误页面中隐藏Apache版本和操作系统标识

说明：当您使用源代码或类似yum的任何其他软件包安装程序安装Apache，它会在错误页面显示您的服务器的操作系统名称和Apache Web服务器的版本。
它还显示有关服务器中安装的Apache模块的信息。

01：编辑apache2.conf 配置文件
# sudo nano /etc/apache2/apache2.conf (Debian/Ubuntu)

直接在配置文件最下方写入以下两项即可（此方法适合apache2.4使用）：
SServerSignature Off
ServerTokens Prod

# service apache2 restart (Debian/Ubuntu) //重启apache

*浏览器输入 http://你的域名地址/test 查看404错误是否还出现apache版本等敏感信息（test为随便乱填）


==============================================================================================================================
2. 禁用目录列表

说明：由默认的Apache列出在没有索引文件的文档根目录的所有内容。只限设置不当时，正常根目录有index.html文件则不需要如此设置，否则屏蔽网页。
例：
.
├── 001
│   └── 001.txt
├── phpmyadmin
└── wordpress
    ├── backwpup_readme.txt
    ├── index.php
    ├── license.txt
    ├── manifest.json
    ├── readme.html
    ├── test01.pluginlist.2018-03-15.txt
    ├── test01.wordpress.2018-03-15.xml
    ├── wordfence-waf.php
    ├── wordpress.sql
    
我们可以通过使用Options指令中的配置文件的特定目录关闭目录列表。 为此，我们需要做在httpd.conf或apache2.conf文件中的条目。

#sudo nano /etc/apache2/apache2.conf   //按照以下找到并修改

<Directory /var/www/html>
  Options -Indexes              //增加此条规则
</Directory>


==============================================================================================================================
3. 定期更新Apache

说明：
Apache的开发者社区将继续努力在安全问题和新的安全选项释放它的更新版本。所以它总是建议使用最新版本的Apache作为Web服务器。
要检查Apache的版本 ：你可以用 httpd -v或 apache2 -v 命令查看当前版本。
例如：
# httpd -v
    Server version: Apache/2.2.15 (Unix)
    Server built:   Aug 13 2013 17:29:28

# apt-get install apache2   //升级apache

==============================================================================================================================

4. 禁用不必要的模块
这是一件好事，不给任何网络攻击的受害者的机会。 因此我们建议禁用所有那些不使用目前的模块 。您可以使用以下命令列出Web服务器的所有已编译模块。
# apachectl -M

Loaded Modules:
 core_module (static)
 so_module (static)
 watchdog_module (static)
 http_module (static)
 log_config_module (static)
 logio_module (static)
 version_module (static)
 unixd_module (static)
 access_compat_module (shared)
 alias_module (shared)
 auth_basic_module (shared)
 authn_core_module (shared)
 authn_file_module (shared)
 authz_core_module (shared)
 authz_host_module (shared)
 authz_user_module (shared)
 autoindex_module (shared)
 deflate_module (shared)
 dir_module (shared)
 env_module (shared)
 filter_module (shared)
 mime_module (shared)
 mpm_prefork_module (shared)
 negotiation_module (shared)
 php7_module (shared)
 setenvif_module (shared)
 status_module (shared)

*完全不知道那个有用那个没用，都是默认加载的。

==============================================================================================================================

5. 以单独的用户和组运行Apache

*按照自己的wordpress安装流程，已经是新增apache用户未www-data，已经是安全没问题的。

默认安装Apache运行，它与用户nobody或守护进程。 为了安全起见，建议在其自己的非特权帐户运行Apache。 例如：http-web 。
创建Apache用户和组
# groupadd http-web
# useradd -d /var/www/ -g http-web -s /bin/nologin http-web 

现在，你需要告诉Apache这个新的用户运行，为此，我们需要在/etc/httpd/conf/httpd.conf中的条目，然后重新启动该服务。
用vim编辑器中打开/etc/httpd/conf/httpd.conf中 ，并搜索关键字“User”和“Group”，并在那里你会需要指定的用户名和组名使用。

User http-web
Group http-web

修改后如下：   //按照自己的wordpress安装流程，已经是新增apache用户未www-data，已经是安全没问题的。
COMMAND  PID     USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
apache2 8883     root    4u  IPv6 101481      0t0  TCP *:http (LISTEN)
apache2 8886 http-web    4u  IPv6 101481      0t0  TCP *:http (LISTEN)
apache2 8887 http-web    4u  IPv6 101481      0t0  TCP *:http (LISTEN)
apache2 8888 http-web    4u  IPv6 101481      0t0  TCP *:http (LISTEN)
apache2 8889 http-web    4u  IPv6 101481      0t0  TCP *:http (LISTEN)
apache2 8890 http-web    4u  IPv6 101481      0t0  TCP *:http (LISTEN)

==============================================================================================================================
6. 使用“允许”和“拒绝”限制对目录的访问
我们可以限制使用“ 允许 ”和“ 拒绝 ”在/etc/apache2/apache2.conf文件选项进入目录。 在这里，在这个例子中，
我们将通过设置在/etc/apache2/apache2.conf文件下面进行保护的根目录 。

<Directory />
    Options None
    Order deny,allow
    Deny from all    //这项注意，加了以后所有目录和文件均不可访问，网页无法打开。
</Directory>

————————————————————————————————————————————————————————————————————————————————————————————————————————————
|Options “None” -这个选项将不允许用户启用任何可选功能。                                                         |
|Order deny, allow -这是其中的“ 拒绝 ”和“ 允许 ”指令将被处理的顺序。 在这里，它会“ 拒绝 ”第一，“ 允许 ”下一个。    |
|Deny from all -这将拒绝来自大家的根目录要求，任何人都无法访问根目录。                                           |
————————————————————————————————————————————————————————————————————————————————————————————————————————————

==============================================================================================================================

7. 使用mod_security和mod_evasive模块来保护Apache

查询加载模块命令 #:apachectl -t -D DUMP_MODULES

第一步：
安装mod_security/mod_evasive，以及其他以来包
#：sudo apt-get install -y libxml2 libxml2-dev libxml2-utils libaprutil1 libaprutil1-dev libapache2-modsecurity libapache2-mod-evasive

==============================================================================
Default locations:

    Apache Webroot: /var/www/html/
    Apache Config: 1/etc/apache2/
    Apache Log folder: /var/log/apache2/
    PHP config: /etc/php5/
    php.ini location for PHP Apps served by Apache: /etc/php5/apache2/php.ini
===============================================================================

检查是否安装成功并激活：
    #：apache2ctl -M | grep -i security
    成功激活后如下显示security2_module (shared)



第二步：配置modsecurity
    #：cp /usr/share/modsecurity-crs/modsecurity_crs_10_setup.conf.example /usr/share/modsecurity-crs/modsecurity_crs_10_setup.conf

第三步：使用modsecurity核心规则集 
    转到/usr/share/modsecurity-crs文件夹，把modsecurity_crs_10_setup.conf文件软连接到activated_rules文件夹。
    #：cd /usr/share/modsecurity-crs
    #：sudo ln -s ../modsecurity_crs_10_setup.conf activated_rules/modsecurity_crs_10_setup.conf

    把base_rules文件夹里的所有归侧文件软连接到activated_rules文件夹激活规则
    #：for f in `ls base_rules`; do sudo ln -s ../base_rules/$f activated_rules/$f; done

    #：ll activated_rules   //查看是否所有归侧都软连接到activated_rules文件夹里面。
    
第四步：修改配置文件
    转到文件夹/etc/modsecurity
    #:cd /etc/modsecurity
    #:cp modsecurity.conf-recommended modsecurity.conf
    把SecRuleEngine DetectionOnly -------->  SecRuleEngine On 保存离开
    
第五步：修改apache2/mods-available/security2.conf配置文件
    #:nano /etc/apache2/mods-available/security2.conf
    
    如下修改：
    <IfModule security2_module>
        # Default Debian dir for modsecurity's persistent data
        SecDataDir /var/cache/modsecurity

        # Include all the *.conf files in /etc/modsecurity.
        # Keeping your local configuration in that directory
        # will allow for an easy upgrade of THIS file and
        # make your life easier
        IncludeOptional /etc/modsecurity/*.conf                                    //重点是整两行的配置和规则文件夹位置
        IncludeOptional /usr/share/modsecurity-crs/activated_rules/*.conf          //重点
    </IfModule>

第六步：重启apache
    #：sudo service apache2 reload
    
    
第七步：测试
    #：curl 'http://localhost/?q="><script>alert(1)</script>'  //XSS攻击测试，正常结果是403
    #：curl "http://localhost/?q='1 OR 1=1"                    //sqli注入测试，正常是403或400 bad request

===================================================================
如果需要用github版本的规则配置文件则参照以下在第三步开始替换原来的配置方式执行：
    $ sudo rm -rf /usr/share/modsecurity-crs
    $ sudo apt-get install -y git
    $ sudo git clone https://github.com/SpiderLabs/owasp-modsecurity-crs.git /usr/share/modsecurity-crs
    
    
   


--------------------mod_evasive设置参考-----------------------
01.安装mod_evasive(本文一开始就安装了，可以忽略本步骤)
apt-get update
apt-get upgrade
apt-get install libapache2-mod-evasive

 配置文件路径 /etc/apache2/mods-available
 $ sudo nano /etc/apache2/mods-available/evasive.conf
 
 *默认情况下，所有模块的设置在安装后都会被注释掉。因此，在修改配置文件之前，模块不会干扰到网站流量。
 =============================================================================================================
 <IfModule mod_evasive20.c>
       #DOSHashTableSize    3097                                     #正在访问网站的 IP 地址列表及其请求数的当前列表。
       #DOSPageCount        2                                        #在一定的时间间隔内，每个页面的请求次数。时间间隔由 DOSPageInterval 定义。
       #DOSSiteCount        50                                       #mod_evasive 统计页面请求次数的时间间隔。
       #DOSPageInterval     1                                        #与 DOSPageCount 相同，但统计的是来自相同 IP 地址对网站内任何页面的请求数量。
       #DOSSiteInterval     1                                        #mod_evasive 统计网站请求次数的时间间隔。
       #DOSBlockingPeriod   10                                       #某个 IP 地址被加入黑名单的时长（以秒为单位）。

       #DOSEmailNotify      you@yourdomain.com                       #用于接收 DOS 攻击信息和 IP 地址黑名单的电子邮件地址。
       #DOSSystemCommand    "su - someuser -c '/sbin/... %s ...'"    #检测到 DOS 攻击时运行的命令。
       #DOSLogDir           "/var/log/mod_evasive"                   #用于存放 mod_evasive 的临时文件的目录。
    </IfModule>


如果使用上面显示的默认配置，则在如下情况下，一个 IP 地址会被加入黑名单：

◈ 每秒请求同一页面超过两次。

◈ 每秒请求 50 个以上不同页面。

如果某个 IP 地址超过了这些阈值，则被加入黑名单 10 秒钟。

这看起来可能不算久，但是，mod_evasive 将一直监视页面请求，包括在黑名单中的 IP 地址，并重置其加入黑名单的起始时间。只要一个 IP 地址一直尝试使用 DOS 攻击该网站，它将始终在黑名单中。

必须要创建日志目录并且要赋予其与 apache 进程相同的所有者。这里创建的目录是 /var/log/mod_evasive ，
并且在 Ubuntu 上将该目录的所有者和组设置为 www-data ，与 Apache 服务器相同：
$ sudo mkdir /var/log/mod_evasive          //建立一个文件夹,存放临时文件，需要自己清理
$ sudo chown www-data:www-data /var/log/mod_evasive






8.重定向404页面




 
